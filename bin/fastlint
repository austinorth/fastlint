#!/usr/bin/env node
var subarg = require('subarg');
var path = require('path');
var multimatch = require('multimatch');
var parallel = require('miniq');
var style = require('ansi-styles');
var fastlint = require('../index');

var findUp = fastlint.findUp;
var getWorkingCopy = fastlint.getWorkingCopy;
var getBetweenCommits = fastlint.getBetweenCommits;
var filterByStatus = fastlint.filterByStatus;
var filterByStaged = fastlint.filterByStaged;
var toPaths = fastlint.toPaths;

var argv = subarg(process.argv.slice(2), {
  boolean: ['working-copy', 'status', 'print0', 'staged'],
  default: {
    format: 'relative',
    delimiter: ' ',
    'working-copy': false,
    'diff-filter': null,
    'staged': null,
  },
});

if (argv.v || argv.version) {
  console.log(require('../package.json').version);
  process.exit();
}

if (argv.help || argv.h) {
  console.log(fs.readFileSync(__dirname + '/usage.txt').toString());
  process.exit();
}

var cwd = process.cwd();

var gitRoot = argv.gitroot || path.dirname(findUp('.git', {cwd: cwd}));

var files = [];
var tasks = [];

var fromCommit = argv._[0];
var toCommit = argv._[1];

// if no params are passed, select the working copy
if (!fromCommit) {
  argv['working-copy'] = true;
}

// normally, require a confirmation to pick up working copy files
if (argv['working-copy']) {
  tasks.push(function(onDone) {
    getWorkingCopy(gitRoot, function(err, results) {
      files.push.apply(files, results);
      return onDone(err);
    })
  });
}


if (fromCommit) {
  // assume HEAD ... (commit) if toCommit is not set
  if (!toCommit) {
    toCommit = fromCommit;
    fromCommit = 'HEAD';
  }
  if (fromCommit === toCommit && toCommit === 'HEAD') {
    toCommit = 'HEAD~1';
  }

  tasks.push(function(onDone) {
    getBetweenCommits(gitRoot, fromCommit, toCommit, function(err, results) {
      files.push.apply(files, results);
      return onDone(err);
    })
  });
}

function pathFormatter(format) {
  return function(file) {
    switch (format) {
      case 'full':
        // NOP - internally, we use full paths
        return file;
        break;
      case 'gitroot':
        return path.relative(gitRoot, file);
        break;
      default:
      case 'relative':
        // make relative
        return path.relative(cwd, file);
    }
  };
}

function formatFiles(files, glob, format, delimiter) {
  files = files.slice();

  var delimiter = argv.delimiter.replace(/\\n/g, '\n').replace(/\\t/g, '\t').replace(/\\r/g, '\r').replace(/\\0/g, '\0');
  return files.map(pathFormatter(format)).join(delimiter);
}

function formatStatus(status, staged) {
  var indicator = staged === false ? style.gray.open + 'u' + style.gray.close : ' ';
  switch (status) {
    case 'A':
      return style.green.open + 'Added ' + indicator + '      ' + style.green.close;
    case 'C':
      return 'Copied ' + indicator + '     ';
    case 'D':
      return style.red.open + 'Deleted ' + indicator + '    ' + style.red.close;
    case 'M':
      return style.yellow.open + 'Modified ' + indicator + '   ' + style.yellow.close;
    case 'R':
      return 'Renamed ' + indicator + '    ';
    case 'T':
      return 'Type changed' + indicator;
    case 'U':
      return 'Unmerged ' + indicator + '   ';
    case 'B':
      return 'Broken ' + indicator + '     ';
    case 'Q':
      return style.gray.open + 'Untracked ' + indicator + '  ' + style.gray.close;
    case 'X':
    default:
      return 'Unknown ' + indicator + '    ';
  }
}

function describeFilters() {
  var result = [];
  if (argv['working-copy']) {
    result.push('  - Selecting files from the working copy');
  }
  if (fromCommit && toCommit) {
    result.push('  - Selecting files from commits between ' + fromCommit + ' and ' + toCommit);
  }
  if (argv['diff-filter']) {
    result.push('  - Filtering out files with git status: ' + argv['diff-filter']);
  }
  if (argv['staged'] !== null) {
    result.push('  - Only selecting files that are ' + (argv['staged'] ? 'staged for commit' : 'unstaged'));
  }
  if (argv['glob']) {
    result.push('  - Applying globs ' + (Array.isArray(argv['glob']) ? argv['glob'] : [argv['glob']]).join(', '));
  }
  return result.join('\n');
}

parallel(1, tasks, function(err) {
  if (err) {
    throw err;
  }

  var patterns = [];

  if (argv.print0) {
    argv.delimiter = '\0';
  }
  if (argv.glob) {
    files = files.filter(function(file) {
      // we want globs to be run against relative paths!!
      var relative = path.relative(cwd, file.path);
      var targets = [relative];
      if (file.path.substr(0, cwd.length) === cwd) {
         // support glob expressions relative to ./ by also matching against ./ for files under the cwd
         targets.push('./' + relative);
      }
      return multimatch(targets, argv.glob, {matchBase: true}).length > 0;
    });
  }
  files = filterByStatus(files, argv['diff-filter']);

  if (argv['staged'] !== null) {
    files = filterByStaged(files, argv['staged']);
  }

  if (argv.status) {
    console.error();
    console.error(style.underline.open + '`fastlint` filters:' + style.underline.close);
    console.error(describeFilters());
    console.error();
    if (files.length === 0) {
      console.error('No files matched!');
    } else {
      var hasUnstaged = files.some(function(file) {
        return file.staged === false;
      });
      if (hasUnstaged) {
        console.error(style.underline.open + 'Selected files:' + style.underline.close + style.gray.open + ' u = not staged for commit' + style.gray.close);

      } else {
        console.error(style.underline.open + 'Selected files:' + style.underline.close);
      }
      var formatter = pathFormatter(argv.format);
      files.forEach(function(file) {
        console.error('  ', formatStatus(file.status, file.staged), formatter(file.path));
      });
      console.error();
    }
  }

  console.log(formatFiles(toPaths(files), argv.glob, argv.format, argv.delimiter));
});
